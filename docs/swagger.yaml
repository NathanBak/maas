openapi: '3.0.0'
info:
  title: maas
  description: Memes-as-a-service
  version: 1.0.0
  contact:
    name: Nathan Bak
    url: https://github.com/NathanBak/maas
    
tags:
  - name: Health
    description: Endpoints to advertise liveliness and readiness
  - name: External
    description: Endpoints used by external clients.  JWTs are used for auth.
      
paths:
  /livez:
    get:
      tags: [Health]
      summary: Service Liveliness
      description: Returns a 200 if the server is alive--intended for use by Kubernetes
      operationId: livez
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "500":
          $ref: "#/components/responses/InternalErrorResponse"

  /readyz:
    get:
      tags: [Health]
      summary: Service Readiness
      description: Returns a 200 if the server is ready--intended for use by Kubernetes
      operationId: readyz
      responses:
        "200":
          $ref: "#/components/responses/MessageResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
          
  /api/v1/memes:
    get:
      tags: [External]
      summary: Primary maas endpoint
      description: Returns a meme
      operationId: getMeme
      parameters:
      - in: query
        name: lat
        schema:
          type: number
        description: Lattitude of the location
      - in: query
        name: lon
        schema:
          type: number
        description: Longitude of the location
      - in: query
        name: query
        schema:
          type: string
        description: search text

      responses:
        "200":
          $ref: "#/components/responses/MemeResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"


components:

  responses:
  
    MemeResponse:
      description: "meme (200)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Meme"
  
    MessageResponse:
      description: "success (200)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
            
    BadRequestResponse:
      description: "bad request (400)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    NotFoundResponse:
      description: "not found (404)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InternalErrorResponse:
      description: "internal server error (500)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
  
    Meme:
      description: Meme information
      type: object
      required:
      - id
      properties:
        id:
          description: ID is a unique request identifier
          type: string
          format: uuid
        text:
          description: Text description of the meme
          type: string
        url:
          description: URL to image or web page of the meme
          type: string
          format: url

    MessageResponse:
      description: MessageResponse contains a message
      type: object
      required:
        - message
      properties:
        message:
          description: Message is the actual response
          type: string
          example: Don't worry, be happy!

    ErrorResponse:
      description: ErrorResponse contains the error mesage and code
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          description: ErrorCode is a unique string identifying the error
          type: string
          example: MAAS-1234567890
        message:
          description: Message is the error message
          type: string
          example: hovercraft is full of eels